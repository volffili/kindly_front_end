{"version":3,"sources":["components/HelpSummary.js","Url.js","components/AskHelp.js","App.js","serviceWorker.js","index.js"],"names":["props","topic","address","Button","color","size","baseUrl","withFormik","validationSchema","Yup","shape","name","matches","required","age","min","max","phone","description","handleSubmit","values","console","log","axios","get","params","api_name","requester_name","requester_age","requester_phone_number","requester_address","request_topic","request_details","errors","touched","className","FormGroup","Label","component","ReactstrapInput","type","placeholder","rows","App","useState","helpAsks","setHelpAsks","useEffect","then","res","data","result","catch","err","error","Table","map","ask","HelpSummary","key","request_id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.26a5a187.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Button} from 'reactstrap'\r\n\r\nexport default (props)=>{\r\n    return(\r\n        <tr>\r\n            \r\n            <td>{props.topic}</td>\r\n            <td>{props.address}</td>\r\n            <td><Button color=\"success\" size=\"sm\">View</Button></td>\r\n        </tr>\r\n    )\r\n}\r\n","export const baseUrl = \"https://nnajnotk8l.execute-api.eu-west-1.amazonaws.com/TEST/neighbourhoodHelpBackendPython\"\r\n","import React from 'react'\r\nimport {withFormik, Form, Field} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport axios from 'axios'\r\nimport {baseUrl} from '../Url'\r\nimport {Button, Label, FormGroup} from 'reactstrap'\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\n\r\nconst AskHelp = ({\r\n    errors,\r\n    touched\r\n}) =>{\r\n    return <Form className=\"askhelp-form\">\r\n        <FormGroup>\r\n            <Label>Name</Label>\r\n            <Field component={ReactstrapInput} type=\"text\" name=\"name\" placeholder=\"First and Last Name\"/>\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label>Age</Label>\r\n            <Field component={ReactstrapInput} type=\"text\" name=\"age\" placeholder=\"Age\"/>\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label>Phone</Label>\r\n            <Field component={ReactstrapInput} type=\"text\" name=\"phone\" placeholder=\"Phone Number\"/>\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label>Address</Label>\r\n            <Field component={ReactstrapInput} type=\"text\" name=\"address\" placeholder=\"Address\"/>\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label>Topic</Label>\r\n            <Field component={ReactstrapInput} type=\"text\" name=\"topic\" placeholder=\"Topic\"/>\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label>Description</Label>\r\n            <Field component={ReactstrapInput} type=\"textarea\" rows=\"3\" name=\"description\" placeholder=\"Description\"/>\r\n        </FormGroup>\r\n\r\n        <Button className=\"btn-lg btn-dark btn-block\">Submit</Button>\r\n    </Form>\r\n}\r\n\r\nexport default withFormik({\r\n    validationSchema: Yup.object().shape({\r\n        name: Yup.string().matches(/.+\\s.+/).required(),\r\n        age: Yup.number().min(6).max(200).required(),\r\n        phone: Yup.string().required(),\r\n        address: Yup.string().required(),\r\n        topic: Yup.string().required(),\r\n        description: Yup.string().min(50).required()\r\n    }),\r\n    handleSubmit(values){    \r\n        console.log(values)\r\n        axios.get(baseUrl,{ \r\n            params: { \r\n                api_name: \"post_help_request\",\r\n                requester_name: values.name,\r\n                requester_age: values.age,\r\n                requester_phone_number: values.phone,\r\n                requester_address: values.address,\r\n                request_topic: values.topic,\r\n                request_details: values.description\r\n            }\r\n        })\r\n    }\r\n})(AskHelp)","import React, {useState, useEffect} from 'react'\nimport {Table} from 'reactstrap'\nimport axios from 'axios'\nimport HelpSummary from './components/HelpSummary'\nimport AskHelp from './components/AskHelp'\nimport {baseUrl} from './Url'\n\nfunction App() {\n\n  const [helpAsks,setHelpAsks] = useState([])\n\n  useEffect(() => {\n    axios.get(baseUrl,{ \n      params: { api_name:\"get_all_help_requests\"}\n    })\n    .then(res=> { setHelpAsks(res.data.result) })  \n    .catch(err => console.error(err))\n  }, []);\n\n  return (\n    <div className=\"App container\">\n      <AskHelp/>\n      <Table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Address</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {helpAsks.map(ask=><HelpSummary\n            key={ask.request_id}\n            topic={ask.request_topic}\n            address={ask.requester_address}\n          />)}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}